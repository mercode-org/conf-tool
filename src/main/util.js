'use strict'

/* eslint-disable no-await-in-loop */

const nixTemplate = (header, content) => `{ config, lib, pkgs, ... }:

# WARNING: THIS FILE IS AUTOGENERATED BY CONF-TOOL AND WILL BE OVERWRITTEN
# ${header}

with lib;

${content}

`

const mkdirp = require('mkdirp').sync
const rimraf = require('rimraf').sync
const fs = require('fs')
const path = require('path')

const U = {
  formatNix: require('./format-nix'),
  renderToFiles: async plugins => {
    const files = {}

    for (let i = 0; i < plugins.length; i++) {
      const plugin = plugins[i]

      files[`${plugin.id}`] = await U.render(plugin)
    }

    files['default.nix'] = nixTemplate(
      'For more information see https://os.mercode.org/docs/conf-tool/',
      `
{
  imports = [
    ${Object.keys(files).map(file => `./${file}`).join('\n  ')}
  ];
}
`
    )
  },
  render: async plugin => {
    const data = await plugin.db.get()

    if (plugin.convertToKeys) {
      const keys = await plugin.convertToKeys(data)
      const nix = U.formatNix(keys)

      return nixTemplate(
        `For more information see https://os.mercode.org/docs/conf-tool/plugins/${plugin.id}`,
        nix
      )
    }

    if (plugin.convertToNix) {
      return plugin.convertToNix(data)
    }

    throw new Error(`Plugin ${plugin.id} cannot be converted to nix file DEVELOPER ERROR`)
  },
  batchWriteFiles: (outDir, files) => {
    rimraf(outDir)
    mkdirp(outDir)
    for (const name in files) { // eslint-disable-line guard-for-in
      fs.writeFileSync(path.join(outDir, name), files[name])
    }
  }
}

module.exports = U
