'use strict'

/* eslint-disable no-await-in-loop */

const nixTemplate = (header, content) => `{ config, lib, pkgs, ... }:

# WARNING: THIS FILE IS AUTOGENERATED BY CONF-TOOL AND WILL BE OVERWRITTEN
# ${header}

with lib;

${content}

`

const mkdirp = require('mkdirp').sync
const rimraf = require('rimraf').sync
const fs = require('fs')
const path = require('path')
const cp = require('child_process')
const bl = require('bl')

const spawn = (cmd, args, catchStdio) => new Promise((resolve, reject) => {
  const p = cp.spawn(cmd, args, { stdio: catchStdio ? 'pipe' : 'inherit' })
  if (catchStdio) {
    p.stdout = p.stdout.pipe(bl())
    p.stderr = p.stderr.pipe(bl())
  }

  p.once('exit', (code, sig) => {
    if (code || sig) {
      return reject(new Error(`Failed with ${code || sig}`))
    }

    return resolve({ stdout: String(p.stdout), stderr: String(p.stderr) })
  })
})

const U = {
  formatNix: require('./format-nix'),
  renderToFiles: async plugins => {
    const files = {}

    for (let i = 0; i < plugins.length; i++) {
      const plugin = plugins[i]

      files[`${plugin.id}.nix`] = await U.render(plugin)
    }

    files['default.nix'] = nixTemplate(
      'For more information see https://os.ssd-solar.dev/docs/conf-tool/',
      `{
  imports = [
    ${Object.keys(files).map(file => `./${file}`).join('\n    ')}
  ];
}`
    )

    return files
  },
  render: async plugin => {
    const data = await plugin.db.get()

    if (plugin.convertToKeys) {
      const keys = await plugin.convertToKeys(data)
      const nix = U.formatNix(keys)

      return nixTemplate(
        `For more information see https://os.ssd-solar.dev/docs/conf-tool/plugins/${plugin.id}`,
        nix
      )
    }

    if (plugin.convertToNix) {
      return plugin.convertToNix(data)
    }

    throw new Error(`Plugin ${plugin.id} cannot be converted to nix file DEVELOPER ERROR`)
  },
  batchWriteFiles: (outDir, files) => {
    rimraf(outDir)
    mkdirp(outDir)
    for (const name in files) { // eslint-disable-line guard-for-in
      fs.writeFileSync(path.join(outDir, name), files[name])
    }
  },
  generateConfig: root => {
    return spawn('nixos-generate-config', ['--root', root])
  },
  applyConfig: upgrade => {
    return spawn('nixos-rebuild', ['switch'].concat(upgrade ? ['--upgrade'] : []))
  },
  checkIfPackageExists: async attr => {
    const [channel, ...channelAttr] = attr.split('.')

    const res = await spawn('nix', ['eval', `(let ch = (import <${channel}> {}); in ch ? ${channelAttr.map(JSON.stringify).join('.')})`], true)
    return JSON.parse(res.stdout.trim() || 'false')
  }
}

module.exports = U
